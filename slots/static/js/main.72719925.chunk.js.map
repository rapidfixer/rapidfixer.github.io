{"version":3,"sources":["components/Reel/reel.module.css","components/Debug/debug.module.css","components/ScoreTable/scoreTable.module.css","App.module.css","components/Input/input.module.css","components/ReelIcon/reelIcon.module.css","components/Button/button.module.css","components/ReelIcon/index.tsx","types.ts","components/Reel/index.tsx","components/Debug/index.tsx","components/Button/index.tsx","components/Input/index.tsx","scoreData.ts","components/ScoreTable/index.tsx","helpers.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","element","small","className","classnames","style","icon","reelElementsOrder","Reel","this","props","rotating","value","activeLines","valueElement","center","top","valueLine","wrapper","window","checkline","topline","includes","activeline","midline","bottomline","bar","ReelIcon","map","el","index","key","checkLine","React","Component","Debug","onClick","bind","event","reelIndex","Number","currentTarget","getAttribute","classList","contains","elementSelect","onChange","reel","line","positions","table","colSpan","selected","data-reelindex","data-value","positionSelect","Button","name","disabled","type","text","button","defaultProps","Input","target","readonly","setState","description","highlighted","input","readOnly","id","score","combinations","activeIds","scoreData","record","row","activeRow","elements","combination","delaySetState","arg","timeout","a","Promise","resolve","setTimeout","getNextReelElement","nextElementIndex","findIndex","length","getPreviousReelElement","prevElementIndex","START_BALANCE","DEBUG_ACTIVE","document","location","hash","App","defaultDebugPositions","state","reelsRotating","generatorValues","_getRandomReelValues","winningScoreIds","debugGeneratorValues","calculateGeneratorValuesFromDebug","debugPositions","gameInProgress","gameOver","debug","balance","onDebugBalanceChange","onDebugPositionsChange","result","i","Math","floor","random","push","bottom","roundResults","getRoundResults","prevState","ids","winLines","mappedValues","checkCombination","values","valuesCopy","every","val","splice","addScoreToResult","forEach","Object","keys","some","pos","currentDebugPositions","currentPositionValue","newBalance","isInteger","slots","rotation","spinButton","runGameRound","ScoreTable","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72719925.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"reel_wrapper__FEjFV\",\"window\":\"reel_window__aBAB-\",\"checkline\":\"reel_checkline__250f9\",\"activeline\":\"reel_activeline__1gd4a\",\"line-blink\":\"reel_line-blink__1BIoE\",\"topline\":\"reel_topline__3yvWe\",\"midline\":\"reel_midline__THzvI\",\"bottomline\":\"reel_bottomline__oS7gd\",\"rotating\":\"reel_rotating__2G7J9\",\"slide-top\":\"reel_slide-top__1UfoB\",\"bar\":\"reel_bar__HRgDd\",\"top\":\"reel_top__1mHtD\",\"tripleBar\":\"reel_tripleBar__3xl9p\",\"center\":\"reel_center__30V0r\",\"singleBar\":\"reel_singleBar__3v4rX\",\"doubleBar\":\"reel_doubleBar__b1bFM\",\"seven\":\"reel_seven__27x99\",\"cherry\":\"reel_cherry__3XqoA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"debug_wrapper__YoC6o\",\"table\":\"debug_table__3eLxL\",\"elementSelect\":\"debug_elementSelect__aoD81\",\"selected\":\"debug_selected__2tZnH\",\"positionSelect\":\"debug_positionSelect__aOaGH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"scoreTable_wrapper__3tK17\",\"combination\":\"scoreTable_combination__3k3mq\",\"score\":\"scoreTable_score__33tum\",\"activeRow\":\"scoreTable_activeRow__2f3Am\",\"shadow-drop-center\":\"scoreTable_shadow-drop-center__16Nfi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__2Rh_f\",\"slots\":\"App_slots__1cSjF\",\"table\":\"App_table__2Wm0g\",\"debug\":\"App_debug__38J3A\",\"balance\":\"App_balance__3sBiG\",\"spinButton\":\"App_spinButton__2QVaE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"input_wrapper__3TJVy\",\"input\":\"input_input__jhdgh\",\"description\":\"input_description__Ufb5s\",\"highlighted\":\"input_highlighted__20s0c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon\":\"reelIcon_icon__ja47l\",\"small\":\"reelIcon_small__1n0oP\",\"cherry\":\"reelIcon_cherry__As6OR\",\"seven\":\"reelIcon_seven__2HSSh\",\"tripleBar\":\"reelIcon_tripleBar__3tyLP\",\"doubleBar\":\"reelIcon_doubleBar__28cjV\",\"singleBar\":\"reelIcon_singleBar__UtAL_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"button_button__2pFT2\",\"default\":\"button_default__3KiSZ\",\"action\":\"button_action__2-3YE\"};","import React from 'react';\nimport { ReelElement } from '../../types';\nimport style from './reelIcon.module.css';\nimport classnames from 'classnames';\n\nexport interface ReelIconProps {\n  element: ReelElement,\n  small?: boolean\n}\n\nexport default ({element, small}: ReelIconProps) => {\n\n  return (\n      <div className={classnames(style.icon, style[element], small && style.small)}>\n      </div>\n  );\n}\n","export const reelElementsOrder = ['tripleBar', 'singleBar', 'doubleBar', 'seven', 'cherry'] as ReelElement[];\n\nexport type ReelElement = 'tripleBar' | 'singleBar' | 'doubleBar' | 'seven' | 'cherry';\nexport type ReelLine = 'top' | 'center' | 'bottom';\nexport type ReelValue = {\n    top: ReelElement,\n    bottom: ReelElement\n} | {\n  center: ReelElement\n}\n\nexport interface ScoreRecord {\n  id: number;\n  line: ReelLine | 'any';\n  score: number;\n  combinations: [Array<ReelElement>];\n}\nexport type ScoreData = Array<ScoreRecord>\n\nexport type DebugPositions = Array<{\n  line: ReelLine;\n  element: ReelElement;\n}>","import React from 'react';\n\nimport ReelIcon from '../ReelIcon';\nimport {\n  ReelValue,\n  reelElementsOrder, \n  ReelLine} from '../../types';\nimport style from './reel.module.css';\nimport classnames from 'classnames';\n\nexport interface ReelProps {\n  activeLines: ReelLine[];\n  rotating: boolean;\n  value: ReelValue;\n}\n\nexport default class Reel extends React.Component<ReelProps> {\n\n  render() {\n    const {rotating, value, activeLines} = this.props;\n\n    const valueElement = 'center' in value\n      ? value.center\n      : value.top;\n    const valueLine = 'center' in value\n      ? 'center'\n      : 'top';\n\n    return (\n      <div className={style.wrapper}>\n        <div className={style.window}>\n          <div className={classnames(style.checkline, style.topline, activeLines.includes('top') && style.activeline)}></div>\n          <div className={classnames(style.checkline, style.midline, activeLines.includes('center') && style.activeline)}></div>\n          <div className={classnames(style.checkline, style.bottomline, activeLines.includes('bottom') && style.activeline)}></div>\n          <div className={classnames(style.bar, style[valueElement], style[valueLine], rotating && style.rotating)}>\n            <ReelIcon element={'cherry'} />\n            {reelElementsOrder.map((el, index) =>\n              <ReelIcon element={el} key={index}/>\n            )}\n              <ReelIcon element={'tripleBar'} />\n          </div>\n        </div>\n          \n            <div className={style.checkLine}></div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport classnames from 'classnames';\n\nimport ReelIcon from '../ReelIcon';\nimport { \n  DebugPositions,\n  ReelElement,\n  ReelLine,\n  reelElementsOrder\n} from '../../types';\nimport style from './debug.module.css';\n\nexport interface DebugChangeParams {\n  reel: number,\n  element?: ReelElement,\n  line?: ReelLine\n}\nexport interface DebugProps {\n  positions: DebugPositions;\n  onChange: (params: DebugChangeParams) => void;\n}\n\nexport default class Debug extends React.Component<DebugProps> {\n  constructor(props: DebugProps) {\n    super(props);\n\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick(event: { currentTarget: HTMLElement; })\n  {\n    const reelIndex = Number(event.currentTarget.getAttribute('data-reelindex'));\n    if(event.currentTarget.classList.contains(style.elementSelect)) { // select reel element\n      this.props.onChange({\n        reel: reelIndex,\n        element: event.currentTarget.getAttribute('data-value') as ReelElement\n      })\n    } else { // select position\n      this.props.onChange({\n        reel: reelIndex,\n        line: event.currentTarget.getAttribute('data-value') as ReelLine\n      })\n    }\n  }\n\n  render() {\n    const {positions} = this.props;\n\n    return (\n      <div className={style.wrapper}>\n        <table className={style.table}>\n          <thead>\n            <tr>\n              <td colSpan={5}>Reels Value</td>\n              <td colSpan={3}>Stop line</td>\n            </tr>\n          </thead>\n          <tbody>\n        {positions.map((value, reelIndex) => (\n          <tr key={reelIndex}>\n            {reelElementsOrder.map((el, index) => (\n              <td\n                className={classnames(style.elementSelect, value.element === el && style.selected)}\n                data-reelindex={reelIndex}\n                data-value={el}\n                key={el}\n                onClick={this.onClick}\n                >\n                <ReelIcon small element={el}/>\n              </td>\n            ))}\n            <td className={classnames(style.positionSelect, value.line === 'top' && style.selected)}\n              data-value={'top'}\n              data-reelindex={reelIndex}\n              onClick={this.onClick}>\n              Top\n            </td>\n            <td className={classnames(style.positionSelect, value.line === 'center' && style.selected)}\n              data-value={'center'}\n              data-reelindex={reelIndex}\n              onClick={this.onClick}>\n              Center\n            </td>\n            <td className={classnames(style.positionSelect, value.line === 'bottom' && style.selected)}\n              data-value={'bottom'}\n              data-reelindex={reelIndex}\n              onClick={this.onClick}>\n              Bottom\n            </td>\n        </tr>\n        ))}\n      </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport style from './button.module.css';\nimport classnames from 'classnames';\n\nexport interface ButtonProps {\n    text: string;\n    name: string;\n    type: 'variable' | 'default' | 'action';\n    disabled?: boolean;\n    onClick: (name: string) => void;\n}\n\nexport default class Button extends React.Component<ButtonProps> {\n  static defaultProps: Partial<ButtonProps> = {\n      text: '',\n      name: '',\n      disabled: false,\n      type: 'default',\n      onClick: () => {}\n  };\n\n  onClick() {\n    this.props.onClick(this.props.name);\n  }\n\n  render() {\n    const {name, disabled, type, text} = this.props;\n    \n    return (\n      <button \n        disabled={disabled}\n        type=\"button\"\n        name={name}\n        className={classnames(style.button, style[type])}\n        onClick={this.onClick.bind(this)}>\n        {text}\n      </button>\n    );\n  }\n}\n","import React, { ChangeEvent } from 'react';\nimport style from './input.module.css';\nimport classnames from 'classnames';\n\nexport interface InputProps {\n    value: string;\n    name: string;\n    readonly: boolean;\n    highlighted: boolean;\n    description?: string;\n    onChange?: (name: string, value: string) => void;\n}\n\nexport default class Input extends React.Component<InputProps> {\n  static defaultProps: Partial<InputProps> = {\n      value: '',\n      name: '',\n      readonly: false,\n      highlighted: false,\n      onChange: () => {}\n  };\n\n  constructor(props: InputProps) {\n    super(props);\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(event: ChangeEvent<HTMLInputElement>)\n  {\n    const value= event.target.value;\n\n    if (!this.props.readonly && this.props.onChange) {\n      this.setState({value}, () => this.props.onChange!(this.props.name, value));\n    }\n  }\n\n  render() {\n    const {description, name, highlighted, readonly } = this.props;\n\n    return (\n      <div className={style.wrapper}>\n        {description &&\n          <span className={style.description}>{description}</span>\n        }\n        <input className={classnames(style.input, highlighted && style.highlighted)}\n          name={name}\n          readOnly={readonly}\n          value={this.props.value}\n          onChange={this.onChange}>\n        </input>\n      </div>\n    );\n  }\n}\n","import { ScoreData } from './types';\n\nexport default [\n  {\n    id: 1,\n    line: 'top',\n    score: 2000,\n    combinations: [\n      ['cherry', 'cherry', 'cherry']\n    ]\n  },\n  {\n    id: 2,\n    line: 'center',\n    score: 1000,\n    combinations: [\n      ['cherry', 'cherry', 'cherry']\n    ]\n  },\n  {\n    id: 3,\n    line: 'bottom',\n    score: 4000,\n    combinations: [\n      ['cherry', 'cherry', 'cherry']\n    ]\n  },\n  {\n    id: 4,\n    line: 'any',\n    score: 150,\n    combinations: [\n      ['seven', 'seven', 'seven']\n    ]\n  },\n  {\n    id: 5,\n    line: 'any',\n    score: 75,\n    combinations: [\n      ['seven', 'cherry']\n    ]\n  },\n  {\n    id: 6,\n    line: 'any',\n    score: 50,\n    combinations: [\n      ['tripleBar', 'tripleBar', 'tripleBar']\n  ]\n  },\n  {\n    id: 7,\n    line: 'any',\n    score: 20,\n    combinations: [\n      ['doubleBar', 'doubleBar', 'doubleBar']\n    ]\n  },\n  {\n    id: 8,\n    line: 'any',\n    score: 10,\n    combinations: [\n      ['singleBar', 'singleBar', 'singleBar']\n    ]\n  },\n  {\n    id: 9,\n    line: 'any',\n    score: 5,\n    combinations: [\n      ['singleBar', 'singleBar'],\n      ['singleBar', 'doubleBar'],\n      ['doubleBar', 'doubleBar'],\n      ['singleBar', 'tripleBar'],\n      ['doubleBar', 'tripleBar'],\n      ['tripleBar', 'tripleBar']\n    ]\n  },\n] as ScoreData","import React from 'react';\n\n\nimport scoreData from '../../scoreData';\nimport ReelIcon from '../ReelIcon';\nimport style from './scoreTable.module.css';\nimport classnames from 'classnames';\n\nexport interface ScoreTableProps {\n  activeIds: number[];\n}\n\nexport default ({activeIds}: ScoreTableProps) => (\n  <div className={style.wrapper}>\n    <table>\n      <tbody>\n        {scoreData.map(record => (\n          <tr\n            className={classnames(style.row, activeIds.includes(record.id) && style.activeRow)}\n            key={record.id}>\n            <td className={style.elements}>\n              {record.combinations.map((combination, index) => (\n                <div className={style.combination} key={index}>\n                  {combination.map(\n                    (element, index) => <ReelIcon small element={element} key={index}/>\n                  )}\n                </div>\n              ))}\n            </td>\n            <td className={style.line}>{record.line}</td>\n            <td className={style.score}>{record.score}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import { reelElementsOrder, ReelElement } from \"./types\";\n\nexport async function delaySetState(arg: object | Function, timeout: number) {\n    return new Promise(resolve => setTimeout(() => {\n        // @ts-ignore\n        this.setState(arg, resolve);\n      }, timeout));\n}\n\nexport function getNextReelElement(element: ReelElement): ReelElement {\n    const nextElementIndex = reelElementsOrder.findIndex(el => el === element) + 1;\n    return nextElementIndex < reelElementsOrder.length\n            ? reelElementsOrder[nextElementIndex]\n            : reelElementsOrder[0]\n}\n\nexport function getPreviousReelElement(element: ReelElement): ReelElement {\n    const prevElementIndex = reelElementsOrder.findIndex(el => el === element) - 1;\n    return prevElementIndex < 0\n            ? reelElementsOrder[reelElementsOrder.length - 1]\n            : reelElementsOrder[prevElementIndex]\n}","import React from 'react';\n\nimport Reel from './components/Reel';\nimport Debug, { DebugChangeParams } from './components/Debug';\nimport Button from './components/Button';\nimport Input from './components/Input';\nimport ScoreTable from './components/ScoreTable';\n\nimport {\n  ReelElement,\n  ReelLine,\n  ReelValue,\n  reelElementsOrder,\n  ScoreRecord,\n  DebugPositions\n} from './types';\n\nimport { \n  delaySetState,\n  getNextReelElement,\n  getPreviousReelElement\n} from './helpers';\n\nimport style from './App.module.css';\nimport scoreData from './scoreData';\n\nconst REEL_ROTATION_TIME = 2000;\nconst REEL_DELAY_TIME = 500;\nconst BLINK_TIME = 2000;\nconst START_BALANCE = 100;\nconst MAX_SETTABLE_BALANCE = 5000;\nconst GAME_PRICE = 1;\nconst DEBUG_ACTIVE = document.location.hash.includes('debug'); // IN REAL APP SUCH THNIGS SHOULD BE SET IN CODE.\n\nexport interface AppState {\n  reelsRotating: Array<boolean>;\n  generatorValues: ReelValue[];\n  debugGeneratorValues: ReelValue[];\n  debugPositions: DebugPositions;\n  winningScoreIds: number[];\n  activeLines: ReelLine[];\n  gameInProgress: boolean;\n  gameOver: boolean;\n  debug: boolean;\n  balance: number;\n}\n\nexport default class App extends React.Component<{}, AppState> {\n  // @ts-ignore\n  async delaySetState(state: ((AppState) => Partial<AppState>) | Partial<AppState>, delay: number): Promise<any>\n\n  constructor(props: {}) {\n    super(props);\n\n    const defaultDebugPositions = \n    [\n      {\n        element: 'seven' as ReelElement,\n        line: 'center' as ReelLine\n      },\n      {\n        element: 'seven' as ReelElement,\n        line: 'center' as ReelLine\n      },\n      {\n        element: 'seven' as ReelElement,\n        line: 'center' as ReelLine\n      }\n    ];\n\n    this.state = {\n      reelsRotating: [false, false, false],\n      generatorValues: this._getRandomReelValues(),\n      winningScoreIds: [],\n      activeLines: [],\n      debugGeneratorValues: this.calculateGeneratorValuesFromDebug(defaultDebugPositions),\n      debugPositions: defaultDebugPositions,\n      gameInProgress: false,\n      gameOver: START_BALANCE <= 0,\n      debug: DEBUG_ACTIVE,\n      balance: START_BALANCE\n    }\n\n    this.delaySetState = delaySetState.bind(this);\n\n    this.onDebugBalanceChange = this.onDebugBalanceChange.bind(this);\n    this.onDebugPositionsChange = this.onDebugPositionsChange.bind(this);\n  }\n\n  _getRandomReelValues() {\n    const result = [] as ReelValue[];\n    for (let i = 0; i < 3; i++) {\n      // every reel has 5 * 2 = 10 positions. Probability of one-line and two-line cases is 50/50.\n      const index = Math.floor(Math.random() * reelElementsOrder.length);\n      if (Math.random() < 0.5) { // center line\n        result.push({\n          center: reelElementsOrder[index]\n        });\n      } else { // two lines\n        // maintain elements order.\n        result.push({\n          top: reelElementsOrder[index],\n          bottom: getNextReelElement(reelElementsOrder[index])\n        })\n      }\n    }\n    return result;\n  }\n\n  runGameRound() {\n    const { balance, debug, debugGeneratorValues } = this.state;\n    if (balance < GAME_PRICE) {\n      return;\n    }\n\n    const generatorValues = debug? debugGeneratorValues : this._getRandomReelValues();\n    const roundResults = this.getRoundResults(generatorValues);\n\n    this.setState({\n      gameInProgress: true,\n      balance: balance - GAME_PRICE,\n      reelsRotating: [true, true, true],\n      generatorValues\n    }, async () => {\n      await this.delaySetState({reelsRotating: [false, true, true]}, REEL_ROTATION_TIME);\n      await this.delaySetState({reelsRotating: [false, false, true]}, REEL_DELAY_TIME);\n      await this.delaySetState({reelsRotating: [false, false, false]}, REEL_DELAY_TIME);\n      if (roundResults.score > 0) { // if we win something\n        this.setState(prevState => ({\n          balance: prevState.balance + roundResults.score,\n          winningScoreIds: roundResults.ids,\n          activeLines: roundResults.winLines\n        }));\n        await this.delaySetState({\n          gameInProgress: false,\n          winningScoreIds: [],\n          activeLines: []\n        }, BLINK_TIME);\n      } else {\n        this.setState({\n          gameInProgress: false\n        });\n      }\n    })\n\n  }\n\n  getRoundResults(generatorValues: ReelValue[]): {\n    ids: number[];\n    score: number;\n    winLines: ReelLine[];\n  } {\n    const result = {\n      ids: [] as number[],\n      score: 0,\n      winLines: [] as ReelLine[]\n    };\n    const mappedValues = {\n      'top': generatorValues.map(value => 'top' in value ? value.top : null),\n      'center': generatorValues.map(value => 'center' in value ? value.center : null),\n      'bottom': generatorValues.map(value => 'bottom' in value ? value.bottom : null)\n    }\n\n    function checkCombination(values: Array<ReelElement | null>, combination: ReelElement[]) {\n      const valuesCopy = [...values];\n      return combination.every(el => {\n        const index = valuesCopy.findIndex(val => val === el);\n        if (index >= 0) {\n          valuesCopy.splice(index, 1);\n          return true;\n        }\n        return false;\n      })\n    }\n\n    function addScoreToResult(record: ScoreRecord, line: ReelLine) {\n      result.ids.push(record.id);\n      result.score += record.score;\n      if (!result.winLines.includes(line)) {\n        result.winLines.push(line);\n      }\n    }\n\n    scoreData.forEach(record => {\n      if (record.line === 'any') {\n        Object.keys(mappedValues).forEach(line =>  // check if at least one line...\n        {\n          if (record.combinations.some( // ...contains at least one combination of this type\n            combination => checkCombination(mappedValues[line as ReelLine], combination)\n          )) {\n            addScoreToResult(record, line as ReelLine);\n          }\n        });\n      }\n      else if (record.combinations.some(\n          combination => checkCombination(mappedValues[record.line as ReelLine], combination)\n        )\n      ) {\n        addScoreToResult(record, record.line);\n      }\n    });\n\n    return result;\n  }\n\n  calculateGeneratorValuesFromDebug(positions: DebugPositions): ReelValue[] {\n    return positions.map(pos => {\n      switch (pos.line) {\n        case 'center':\n            return {\n              center: pos.element\n            }\n        case 'top':\n            return {\n              top: pos.element,\n              bottom: getNextReelElement(pos.element)\n            }\n        case 'bottom':\n            return {\n              top: getPreviousReelElement(pos.element),\n              bottom: pos.element\n            }\n      }\n    })\n  }\n\n  onDebugPositionsChange({reel, element, line}: DebugChangeParams) {\n    const currentDebugPositions = [...this.state.debugPositions];\n\n    // updating debugPositions\n    let currentPositionValue = currentDebugPositions[reel];\n    if (element) {\n      currentPositionValue.element = element;\n    }\n    else if (line) {\n      currentPositionValue.line = line;\n    }\n\n    currentDebugPositions.splice(reel, 1, currentPositionValue)\n\n    this.setState({\n      debugGeneratorValues: this.calculateGeneratorValuesFromDebug(currentDebugPositions),\n      debugPositions: currentDebugPositions\n    })\n  }\n\n  onDebugBalanceChange(name: string, value: string) {\n    let newBalance = Number(value);\n    if (Number.isInteger(newBalance)) {\n      if (newBalance < 0) {\n        newBalance = 0;\n      }\n      if (newBalance > MAX_SETTABLE_BALANCE) {\n        newBalance = MAX_SETTABLE_BALANCE;\n      }\n      this.setState({\n        balance: newBalance\n      })\n    }\n  }\n\n  render() {\n    const {\n      balance,\n      gameInProgress,\n      debug,\n      debugPositions,\n      winningScoreIds,\n      activeLines,\n      reelsRotating,\n      generatorValues\n    } = this.state;\n\n    return (\n      <div className={style.wrapper}>\n          <div className={style.slots}>\n            {reelsRotating.map((rotation, index) => \n              <Reel\n                key={index}\n                rotating={rotation}\n                activeLines={activeLines}\n                value={generatorValues[index]}\n              />\n            )\n            }\n          </div>\n          <div className={style.balance}>\n            <Input\n              name=\"balance\"\n              value={''+balance}\n              readonly={!debug || gameInProgress}\n              onChange={this.onDebugBalanceChange}\n            />\n          </div>\n          <div className={style.spinButton}>\n            <Button \n              disabled={gameInProgress}\n              text=\"SPIN\"\n              type=\"action\"\n              onClick={this.runGameRound.bind(this)}\n            />\n          </div>\n          <div className={style.table}>\n            <ScoreTable activeIds={winningScoreIds}/>\n          </div>\n          {this.state.debug && <div className={style.debug}>\n            <Debug positions={debugPositions} onChange={this.onDebugPositionsChange} />\n          </div>}\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}